// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoireServer.Database.Models.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NoireServer.Migrations
{
    [DbContext(typeof(NoireContext))]
    partial class NoireContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoireServer.Database.Model.GameData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Bandit")
                        .HasColumnType("text")
                        .HasColumnName("bandit");

                    b.Property<string>("Inspector")
                        .HasColumnType("text")
                        .HasColumnName("inspector");

                    b.Property<string>("PlayingField")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_field");

                    b.Property<string>("ProofDeck")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proof_deck");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Win")
                        .HasColumnType("text")
                        .HasColumnName("win");

                    b.HasKey("Id");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("NoireServer.Database.Model.PlayerData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(true)
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityForInspector")
                        .HasColumnType("text")
                        .HasColumnName("identity_for_inspector");

                    b.Property<bool>("IsYourMove")
                        .HasColumnType("boolean")
                        .HasColumnName("is_your_move");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("YourRole")
                        .HasColumnType("integer")
                        .HasColumnName("your_role");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("NoireServer.Database.Model.PlayerData", b =>
                {
                    b.HasOne("NoireServer.Database.Model.GameData", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });
#pragma warning restore 612, 618
        }
    }
}
